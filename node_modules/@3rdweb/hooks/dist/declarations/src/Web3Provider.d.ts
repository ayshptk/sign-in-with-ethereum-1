import { AbstractConnectorArguments } from "@web3-react/types";
import { WalletConnectConnectorArguments } from "@web3-react/walletconnect-connector";
import React from "react";
interface MagicConnectorArguments {
    apiKey: string;
    chainId: number;
}
interface WalletLinkConnectorArguments {
    url: string;
    appName: string;
    appLogoUrl?: string;
    darkMode?: boolean;
    supportedChainIds?: number[];
}
export declare type ConnectorOptions = {
    injected: AbstractConnectorArguments;
    magic: MagicConnectorArguments;
    walletconnect: WalletConnectConnectorArguments;
    walletlink: WalletLinkConnectorArguments;
};
export declare type ConnectorType = keyof ConnectorOptions;
export interface AddEthereumChainParameter {
    chainId: string;
    chainName: string;
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: 18;
    };
    rpcUrls: string[];
    blockExplorerUrls?: string[];
    iconUrls?: string[];
}
export interface NetworkMetadata {
    chainName: string;
    iconUrl: string;
    symbol: string;
    isTestnet: boolean;
}
export interface ThirdwebContext {
    _inProvider: boolean;
    readonly connectors: Partial<ConnectorOptions>;
    readonly supportedChainIds: number[];
    readonly networkMetadata?: Record<number, NetworkMetadata>;
    readonly chainAddConfig?: Record<number, AddEthereumChainParameter>;
}
export declare function useThirdwebContext(): ThirdwebContext;
export interface ThirdwebWeb3ProviderProps {
    connectors: ThirdwebContext["connectors"];
    supportedChainIds: ThirdwebContext["supportedChainIds"];
    networkMetadata?: ThirdwebContext["networkMetadata"];
    chainAddConfig?: ThirdwebContext["chainAddConfig"];
}
export declare const ThirdwebWeb3Provider: React.FC<ThirdwebWeb3ProviderProps>;
export {};
