import { LazyNFT as Drop } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber, BigNumberish, BytesLike } from "ethers";
import { ModuleType, Role } from "../common";
import { NFTMetadataOwner } from "../common/nft";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
import ClaimConditionFactory from "../factories/ClaimConditionFactory";
import { PublicMintCondition } from "../types/claim-conditions/PublicMintCondition";
/**
 * @beta
 */
export interface CreatePublicMintCondition {
    startTimestampInSeconds?: BigNumberish;
    maxMintSupply: BigNumberish;
    quantityLimitPerTransaction?: BigNumberish;
    waitTimeSecondsLimitPerTransaction?: BigNumberish;
    pricePerToken?: BigNumberish;
    currency?: string;
    merkleRoot?: BytesLike;
}
/**
 * Access this module by calling {@link ThirdwebSDK.getDropModule}
 * @beta
 */
export declare class DropModule extends ModuleWithRoles<Drop> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "transfer"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): Drop;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    private getTokenMetadata;
    get(tokenId: string): Promise<NFTMetadataOwner>;
    getAll(): Promise<NFTMetadataOwner[]>;
    getAllUnclaimed(): Promise<NFTMetadataOwner[]>;
    getAllClaimed(): Promise<NFTMetadataOwner[]>;
    ownerOf(tokenId: string): Promise<string>;
    getOwned(_address?: string): Promise<NFTMetadataOwner[]>;
    getActiveMintCondition(): Promise<PublicMintCondition>;
    getAllMintConditions(): Promise<PublicMintCondition[]>;
    totalSupply(): Promise<BigNumber>;
    maxTotalSupply(): Promise<BigNumber>;
    totalUnclaimedSupply(): Promise<BigNumber>;
    totalClaimedSupply(): Promise<BigNumber>;
    balanceOf(address: string): Promise<BigNumber>;
    balance(): Promise<BigNumber>;
    isApproved(address: string, operator: string): Promise<boolean>;
    setApproval(operator: string, approved?: boolean): Promise<TransactionReceipt>;
    transfer(to: string, tokenId: string): Promise<TransactionReceipt>;
    /**
     * @deprecated - The function has been deprecated. Use `mintBatch` instead.
     */
    lazyMint(metadata: MetadataURIOrObject): Promise<void>;
    /**
     * @deprecated - The function has been deprecated. Use `mintBatch` instead.
     */
    lazyMintBatch(metadatas: MetadataURIOrObject[]): Promise<void>;
    /**
     * @deprecated - The function has been deprecated. Use `mintBatch` instead.
     */
    lazyMintAmount(amount: BigNumberish): Promise<void>;
    /**
     * Sets public mint conditions for the next minting using the
     * claim condition factory.
     *
     * @param factory - The claim condition factory.
     */
    setMintConditions(factory: ClaimConditionFactory): Promise<void>;
    getMintConditionsFactory(): Promise<ClaimConditionFactory>;
    /**
     * @deprecated - Use the ClaimConditionFactory instead.
     */
    setPublicMintConditions(conditions: CreatePublicMintCondition[]): Promise<void>;
    claim(quantity: BigNumberish, proofs?: BytesLike[]): Promise<void>;
    burn(tokenId: BigNumberish): Promise<TransactionReceipt>;
    transferFrom(from: string, to: string, tokenId: BigNumberish): Promise<TransactionReceipt>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    setRoyaltyBps(amount: number): Promise<TransactionReceipt>;
    setBaseTokenUri(uri: string): Promise<TransactionReceipt>;
    setMaxTotalSupply(amount: BigNumberish): Promise<TransactionReceipt>;
    setRestrictedTransfer(restricted: boolean): Promise<TransactionReceipt>;
    /**
     * Gets the royalty BPS (basis points) of the contract
     *
     * @returns - The royalty BPS
     */
    getRoyaltyBps(): Promise<BigNumberish>;
    /**
     * Gets the address of the royalty recipient
     *
     * @returns - The royalty BPS
     */
    getRoyaltyRecipientAddress(): Promise<string>;
}
