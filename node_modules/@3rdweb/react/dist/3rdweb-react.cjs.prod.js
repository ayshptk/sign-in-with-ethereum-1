'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('@3rdweb/hooks');
var React = require('react');
var react = require('@chakra-ui/react');
var icons = require('@chakra-ui/icons');
var fi = require('react-icons/fi');
var io5 = require('react-icons/io5');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const ThirdwebThemeProvider = ({
  theme,
  children
}) => {
  return /*#__PURE__*/React__default["default"].createElement(react.ChakraProvider, {
    theme: theme
  }, children);
};

const ThirdwebProvider = ({
  theme,
  children,
  ...restProps
}) => {
  return /*#__PURE__*/React__default["default"].createElement(hooks.ThirdwebWeb3Provider, restProps, /*#__PURE__*/React__default["default"].createElement(ThirdwebThemeProvider, {
    theme: theme
  }, children));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function shortenAddress(str) {
  return `${str.substring(0, 6)}...${str.substring(str.length - 4)}`;
}

const ConnectButton = ({
  onOpen,
  isOpen,
  ...props
}) => {
  const {
    address,
    balance,
    chainId,
    error,
    getNetworkMetadata
  } = hooks.useWeb3();
  const {
    switchError
  } = hooks.useSwitchNetwork();
  const networkMetadata = React.useMemo(() => {
    if (chainId) {
      return getNetworkMetadata(chainId);
    }
  }, [chainId, getNetworkMetadata]);
  return /*#__PURE__*/React__default["default"].createElement(react.Tooltip, {
    zIndex: -1,
    hasArrow: true,
    isOpen: !isOpen && (!!error || !!switchError),
    label: switchError ? switchError.message : error ? error.message : address ? "Manage your connected wallet" : "Connect your wallet to get started"
  }, address ? /*#__PURE__*/React__default["default"].createElement(react.Flex, _extends({
    borderRadius: "25px",
    borderWidth: "1px",
    borderColor: "gray.300",
    padding: "6px",
    height: "48px",
    align: "center",
    onClick: onOpen,
    cursor: "pointer",
    _hover: {
      borderColor: "#5CC4FF"
    }
  }, props), /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    flexShrink: 0,
    direction: "row",
    align: "center",
    pr: 3
  }, networkMetadata?.iconUrl && /*#__PURE__*/React__default["default"].createElement(react.Image, {
    height: "36px",
    width: "36px",
    borderRadius: "25px",
    src: networkMetadata.iconUrl
  }), /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    textAlign: "left",
    justify: "flex-start",
    spacing: 0
  }, /*#__PURE__*/React__default["default"].createElement(react.Text, {
    size: "label.md",
    color: "heading",
    lineHeight: 1
  }, shortenAddress(address)), /*#__PURE__*/React__default["default"].createElement(react.Text, {
    color: "gray.500",
    fontSize: "12px",
    lineHeight: 1
  }, networkMetadata?.chainName))), /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    borderColor: "gray.300",
    flexShrink: 0,
    orientation: "vertical"
  }), /*#__PURE__*/React__default["default"].createElement(react.Text, {
    flexShrink: 0,
    px: 3,
    fontSize: "12px",
    color: "#0098EE",
    lineHeight: "14px"
  }, balance?.formatted, networkMetadata && networkMetadata.symbol.length > 2 && /*#__PURE__*/React__default["default"].createElement("br", null), networkMetadata?.symbol)) : /*#__PURE__*/React__default["default"].createElement(react.Button, _extends({
    px: 6,
    borderRadius: "8px",
    leftIcon: error || switchError ? /*#__PURE__*/React__default["default"].createElement(icons.Icon, {
      as: fi.FiAlertTriangle
    }) : /*#__PURE__*/React__default["default"].createElement(icons.Icon, {
      as: io5.IoWalletOutline
    }),
    onClick: onOpen,
    iconSpacing: 3,
    colorScheme: error || switchError ? "red" : "blue"
  }, props), error || switchError ? "Network Error" : "Connect Wallet"));
};

const AddressCopyButton = ({
  address,
  noIcon,
  ...restButtonProps
}) => {
  const {
    onCopy
  } = react.useClipboard(address || "");
  const toast = react.useToast();
  const defaultProps = {
    flexGrow: 0,
    variant: "solid",
    size: "sm",
    fontSize: "md",
    fontWeight: "normal"
  };
  return /*#__PURE__*/React__default["default"].createElement(react.Tooltip, {
    hasArrow: true,
    label: "Copy address to clipboard"
  }, /*#__PURE__*/React__default["default"].createElement(react.ButtonGroup, _extends({}, defaultProps, restButtonProps, {
    isAttached: true,
    onClick: e => {
      e.stopPropagation();
      e.preventDefault();
      onCopy();
      toast({
        title: "Address copied.",
        status: "success",
        duration: 5000,
        isClosable: true
      });
    }
  }), noIcon ? null : /*#__PURE__*/React__default["default"].createElement(react.IconButton, {
    mr: "-px",
    borderRight: "none",
    "aria-label": "Add to friends",
    icon: /*#__PURE__*/React__default["default"].createElement(react.Icon, {
      as: io5.IoCopy
    })
  }), /*#__PURE__*/React__default["default"].createElement(react.Button, null, address && shortenAddress(address))));
};

const ModalConnected = ({
  disableNetworkSwitching
}) => {
  const {
    supportedChainIds
  } = hooks.useThirdwebContext();
  const {
    switchError
  } = hooks.useSwitchNetwork();
  const {
    chainId,
    connector,
    error,
    address,
    activeProvider,
    disconnectWallet,
    getNetworkMetadata
  } = hooks.useWeb3();
  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, !disableNetworkSwitching && !connector?.magic && !connector?.walletConnectProvider && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600",
    mb: "12px"
  }, "Switch network"), supportedChainIds.filter(cId => !getNetworkMetadata(cId).isTestnet).map((cId, index) => /*#__PURE__*/React__default["default"].createElement(Network, {
    key: index,
    index: index,
    cId: cId
  })), supportedChainIds.filter(cId => getNetworkMetadata(cId).isTestnet).map((cId, index) => /*#__PURE__*/React__default["default"].createElement(Network, {
    key: index,
    index: index,
    cId: cId
  }))), /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  })), disableNetworkSwitching && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600",
    mb: "12px"
  }, "Connected network"), /*#__PURE__*/React__default["default"].createElement(Network, {
    index: 0,
    cId: chainId || 0
  })), /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  })), /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    spacing: 4
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600"
  }, "Connected wallet"), error || switchError ? /*#__PURE__*/React__default["default"].createElement(react.Alert, {
    status: "error",
    borderRadius: "md",
    fontSize: "sm",
    fontWeight: "medium"
  }, /*#__PURE__*/React__default["default"].createElement(react.AlertIcon, null), switchError?.message || error?.message) : /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    align: "center"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column",
    align: "start"
  }, /*#__PURE__*/React__default["default"].createElement(AddressCopyButton, {
    variant: "outline",
    address: address
  })), /*#__PURE__*/React__default["default"].createElement(react.Button, {
    onClick: disconnectWallet,
    variant: "outline",
    ml: "auto",
    size: "sm"
  }, activeProvider?.isMetaMask ? "Switch" : "Disconnect"))));
};

const Network = ({
  index,
  cId
}) => {
  const {
    chainId,
    getNetworkMetadata
  } = hooks.useWeb3();
  const {
    switchNetwork
  } = hooks.useSwitchNetwork();
  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    key: index,
    alignSelf: "center",
    onClick: () => switchNetwork(cId),
    align: "center",
    width: "md",
    px: "20px",
    py: "2px",
    cursor: "pointer"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    width: "100%",
    align: "center",
    borderRadius: "25px",
    padding: "6px",
    justify: "space-between",
    bg: cId === chainId ? "gray.100" : undefined,
    _hover: {
      bg: "gray.200"
    }
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    align: "center"
  }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
    src: getNetworkMetadata(cId).iconUrl,
    height: "36px",
    width: "36px",
    borderRadius: "25px"
  }), /*#__PURE__*/React__default["default"].createElement(react.Text, {
    ml: "12px",
    fontWeight: "medium",
    fontSize: "14px"
  }, getNetworkMetadata(cId).chainName), getNetworkMetadata(cId).isTestnet && /*#__PURE__*/React__default["default"].createElement(react.Text, {
    fontSize: "14px",
    color: "gray.400"
  }, "\xA0(testnet)")), cId === chainId && /*#__PURE__*/React__default["default"].createElement(react.Text, {
    color: "blue.400",
    fontSize: "14px",
    mr: "8px"
  }, "Connected")));
};

const ModalDisconnected = () => {
  const [email, setEmail] = React.useState("");
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState(false);
  const {
    address,
    connectWallet,
    connectors
  } = hooks.useWeb3();

  function isEmailValid() {
    const re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  }

  async function connectMagic() {
    if (isEmailValid()) {
      setEmail("");
      setLoading(true);
      await connectWallet("magic", {
        email
      });
      setLoading(false);
    } else {
      setError(true);
    }
  }

  return /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, connectors.includes("magic") && /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    spacing: 4
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600"
  }, "Connect with email"), /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, null, /*#__PURE__*/React__default["default"].createElement(react.Input, {
    value: email,
    onChange: e => {
      setEmail(e.target.value);
      setError(false);
    },
    placeholder: "name@example.com",
    borderRadius: "4px 0px 0px 4px"
  }), /*#__PURE__*/React__default["default"].createElement(react.Button, {
    borderRadius: "0px 4px 4px 0px",
    width: "120px",
    onClick: connectMagic
  }, loading ? /*#__PURE__*/React__default["default"].createElement(react.Flex, null, /*#__PURE__*/React__default["default"].createElement(react.Spinner, null)) : "Connect")), error && /*#__PURE__*/React__default["default"].createElement(react.Text, {
    color: "red.400",
    fontSize: "14px",
    mt: "4px"
  }, "Please enter a valid email."))), connectors.includes("magic") && connectors.some(connector => connector !== "magic") && /*#__PURE__*/React__default["default"].createElement(react.Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  }), connectors.some(connector => connector !== "magic") && /*#__PURE__*/React__default["default"].createElement(react.Stack, {
    spacing: 4
  }, /*#__PURE__*/React__default["default"].createElement(react.Heading, {
    as: "h4",
    size: "sm",
    mt: "0px",
    fontWeight: "600"
  }, "Connect a", address ? " different" : "", " wallet"), connectors.includes("injected") && typeof window !== "undefined" && "ethereum" in window && /*#__PURE__*/React__default["default"].createElement(react.Button, {
    display: {
      base: "none",
      sm: "flex"
    },
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React__default["default"].createElement(react.AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: "https://thirdweb.com/logos/metamask-fox.svg"
    })),
    onClick: () => connectWallet("injected")
  }, "MetaMask"), connectors.includes("walletconnect") && /*#__PURE__*/React__default["default"].createElement(react.Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React__default["default"].createElement(react.AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: "https://thirdweb.com/logos/walletconnect-logo.svg"
    })),
    onClick: () => connectWallet("walletconnect")
  }, "WalletConnect"), connectors.includes("walletlink") && /*#__PURE__*/React__default["default"].createElement(react.Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React__default["default"].createElement(react.AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React__default["default"].createElement(react.Image, {
      src: "https://thirdweb.com/logos/coinbase-wallet-logo.svg"
    })),
    onClick: () => connectWallet("walletlink")
  }, "Coinbase Wallet")));
};

const ConnectWallet = ({
  disableNetworkSwitching,
  ...props
}) => {
  const {
    isOpen,
    onOpen,
    onClose
  } = react.useDisclosure();
  const {
    chainId,
    address,
    connector,
    error
  } = hooks.useWeb3();
  const previousConnector = react.usePrevious(connector);
  const previousChainId = react.usePrevious(chainId);
  const previousAddress = react.usePrevious(address); // if chain id changes, then close modal

  React.useEffect(() => {
    if (previousChainId !== chainId) {
      onClose();
    }
  }, [chainId, previousChainId, onClose]); // if chain id changes, then close modal

  React.useEffect(() => {
    if (previousAddress !== address) {
      onClose();
    }
  }, [onClose, previousAddress, address]); // if connector changes, then close modal

  React.useEffect(() => {
    if (connector && !previousConnector || !connector && previousConnector) {
      onClose();
    }
  }, [connector, onClose, previousConnector]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(ConnectButton, _extends({
    isOpen: isOpen,
    onOpen: onOpen
  }, props)), /*#__PURE__*/React__default["default"].createElement(react.Modal, {
    isOpen: isOpen,
    onClose: onClose,
    isCentered: true,
    size: "md"
  }, /*#__PURE__*/React__default["default"].createElement(react.ModalOverlay, null), /*#__PURE__*/React__default["default"].createElement(react.ModalContent, {
    pb: 4,
    bg: "gray.50"
  }, /*#__PURE__*/React__default["default"].createElement(react.ModalCloseButton, null), /*#__PURE__*/React__default["default"].createElement(react.ModalBody, {
    pt: "24px"
  }, /*#__PURE__*/React__default["default"].createElement(react.Flex, {
    direction: "column"
  }, connector && !error ? /*#__PURE__*/React__default["default"].createElement(ModalConnected, {
    disableNetworkSwitching: disableNetworkSwitching
  }) : /*#__PURE__*/React__default["default"].createElement(ModalDisconnected, null))))));
};

exports.ConnectWallet = ConnectWallet;
exports.ThirdwebProvider = ThirdwebProvider;
